from django.db import models
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.models import AbstractBaseUser,PermissionsMixin,BaseUserManager
from django.contrib.auth.hashers import make_password
    
class CustomUserManager(BaseUserManager): 
    def create_user(self,user_phone_number,current_otp,**other_fields): 
        if not user_phone_number:
            raise ValueError(_("You must provide a phone number"))
        if not current_otp:
            raise ValueError(_("You must provide a otp"))
        
        user=self.model(user_phone_number=user_phone_number,current_otp=current_otp,**other_fields)
        # user.set_password(current_otp)
        user.set_password(current_otp)
        user.save()
        return user
    
    def create_superuser(self,user_phone_number,current_otp,**other_fields):
        other_fields.setdefault('is_active',True)
        # other_fields.setdefault('is_staff',True)
        other_fields.setdefault('is_staff',True)
        other_fields.setdefault('is_superuser',True)
        
        if other_fields.get('is_staff') is not True:
            raise ValueError('Superuser must be assigned to is_staff=True.')
        if other_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must be assigned to is_superuser=True.')
        
        return self.create_user(user_phone_number,current_otp,**other_fields)
    
    # def create_staffuser(self,phone_number,current_otp,**other_fields):
    #     other_fields.setdefault('is_active',True)
    #     # other_fields.setdefault('is_staff',True)
    #     other_fields.setdefault('is_staff',True)
        
    #     if other_fields.get('is_staff') is not True:
    #         raise ValueError('Superuser must be assigned to is_staff=True.')
        
    #     return self.create_user(phone_number,current_otp,**other_fields)
        
# Defining UserModel With Phone Number As Login Credential.
class User(AbstractBaseUser, PermissionsMixin):
    user_phone_number=models.CharField(_("phone number of the user"),max_length=13,unique=True,primary_key=True)
    is_phone_verified = models.BooleanField(_("verification status of phone number"),
                                            default=False)
    current_otp=models.CharField(_("current otp of the phone number in the database"),max_length=6) 
    # It Will Be Randomly Generated By The Program Whenever User
    # Will Try To Login Into The API By random.randint(100000,999999).
    #  Which Will Be Converted To String.And Will Be Sent To The Registered
    # Mobile Number Through SMS By The Help Of SMS API.
    
    date_joined = models.DateTimeField(_("date joined"), default=timezone.now())
    is_staff = models.BooleanField(
        _("staff status"),
        default=False,
        help_text=_("Designates whether the user can log into this admin site."),
    )
    # is_staff = models.BooleanField(
    #     _("admin status"),
    #     default=False,
    #     help_text=_("Designates whether the user can log into this admin site."),
    # )
    is_active = models.BooleanField(
        _("active"),
        default=False,
        help_text=_(
            "Designates whether this user should be treated as active. "
            "Unselect this instead of deleting accounts."
        ),
    )
    
    objects= CustomUserManager()
    
    USERNAME_FIELD = 'user_phone_number'
    REQUIRED_FIELDS = ['current_otp']
    
    def __str__(self):
        return self.user_phone_number
    

from multiselectfield import MultiSelectField

# Create your models here.
class UserDetails(models.Model):
    WORK_CHOICES = (
        ('Transport Contractor','Transport Contractor'),
        ('Truck Owner','Truck Owner'),
        ('Commission Agent','Commission Agent'),
        ('Shipper','Shipper'),
        )
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    user_name = models.CharField(_('name of user'),max_length=100)
    email = models.EmailField(_('email of user'),max_length=200)
    city = models.CharField(_('city of residence'),max_length=100)
    work = MultiSelectField(_('occupation of user'),choices= WORK_CHOICES)
    
    USERNAME_FIELD = 'user'
    REQUIRED_FIELDS = ['user_name','email','city','work']
    
    def __str__(self):
        return self.user_name